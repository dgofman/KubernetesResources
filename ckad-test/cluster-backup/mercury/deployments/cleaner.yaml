apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"creationTimestamp":null,"name":"cleaner","namespace":"mercury"},"spec":{"replicas":2,"selector":{"matchLabels":{"id":"cleaner"}},"template":{"metadata":{"labels":{"id":"cleaner"}},"spec":{"containers":[{"args":["bash","-c","while true; do echo `date`: \"remove random file\" \u003e\u003e /var/log/cleaner/cleaner.log; sleep 1; done"],"image":"bash:5.0.11","name":"cleaner-con","volumeMounts":[{"mountPath":"/var/log/cleaner","name":"logs"}]}],"initContainers":[{"command":["bash","-c","echo init \u003e /var/log/cleaner/cleaner.log"],"image":"bash:5.0.11","name":"init","volumeMounts":[{"mountPath":"/var/log/cleaner","name":"logs"}]}],"volumes":[{"emptyDir":{},"name":"logs"}]}}}}
  creationTimestamp: "2022-07-08T07:57:40Z"
  generation: 1
  name: cleaner
  namespace: mercury
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      id: cleaner
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        id: cleaner
    spec:
      containers:
      - args:
        - bash
        - -c
        - 'while true; do echo `date`: "remove random file" >> /var/log/cleaner/cleaner.log;
          sleep 1; done'
        image: bash:5.0.11
        imagePullPolicy: IfNotPresent
        name: cleaner-con
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/log/cleaner
          name: logs
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - bash
        - -c
        - echo init > /var/log/cleaner/cleaner.log
        image: bash:5.0.11
        imagePullPolicy: IfNotPresent
        name: init
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/log/cleaner
          name: logs
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: logs
status:
  availableReplicas: 2
  conditions:
  - lastTransitionTime: "2022-07-08T07:59:14Z"
    lastUpdateTime: "2022-07-08T07:59:14Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2022-07-08T07:57:40Z"
    lastUpdateTime: "2022-07-08T07:59:14Z"
    message: ReplicaSet "cleaner-5c4b467b55" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 2
  replicas: 2
  updatedReplicas: 2
